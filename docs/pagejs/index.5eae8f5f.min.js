/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdate"];
/******/ 	this["webpackHotUpdate"] = 
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/ 	
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		head.appendChild(script);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadManifest() { // eslint-disable-line no-unused-vars
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if(typeof XMLHttpRequest === "undefined")
/******/ 				return reject(new Error("No browser support"));
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = 10000;
/******/ 				request.send(null);
/******/ 			} catch(err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if(request.readyState !== 4) return;
/******/ 				if(request.status === 0) {
/******/ 					// timeout
/******/ 					reject(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 				} else if(request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if(request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch(e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	
/******/ 	
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "5eae8f5f2f676312eb10"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if(me.children.indexOf(request) < 0)
/******/ 					me.children.push(request);
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name) && name !== "e") {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/ 	
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if(hotStatus === "prepare") {
/******/ 					if(!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest().then(function(update) {
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if(!deferred) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate).then(function(result) {
/******/ 				deferred.resolve(result);
/******/ 			}, function(err) {
/******/ 				deferred.reject(err);
/******/ 			});
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/ 	
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/ 	
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice().map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while(queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if(module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(!parent) continue;
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 	
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn("[HMR] unexpected require(" + result.moduleId + ") to disposed module");
/******/ 		};
/******/ 	
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				var result;
/******/ 				if(hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if(result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch(result.type) {
/******/ 					case "self-declined":
/******/ 						if(options.onDeclined)
/******/ 							options.onDeclined(result);
/******/ 						if(!options.ignoreDeclined)
/******/ 							abortError = new Error("Aborted because of self decline: " + result.moduleId + chainInfo);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if(options.onDeclined)
/******/ 							options.onDeclined(result);
/******/ 						if(!options.ignoreDeclined)
/******/ 							abortError = new Error("Aborted because of declined dependency: " + result.moduleId + " in " + result.parentId + chainInfo);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if(options.onUnaccepted)
/******/ 							options.onUnaccepted(result);
/******/ 						if(!options.ignoreUnaccepted)
/******/ 							abortError = new Error("Aborted because " + moduleId + " is not accepted" + chainInfo);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if(options.onAccepted)
/******/ 							options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if(options.onDisposed)
/******/ 							options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if(abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if(doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for(moduleId in result.outdatedDependencies) {
/******/ 						if(Object.prototype.hasOwnProperty.call(result.outdatedDependencies, moduleId)) {
/******/ 							if(!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(outdatedDependencies[moduleId], result.outdatedDependencies[moduleId]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if(doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if(hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/ 	
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for(moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				module = installedModules[moduleId];
/******/ 				if(module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for(j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if(idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				module = installedModules[moduleId];
/******/ 				moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					dependency = moduleOutdatedDependencies[i];
/******/ 					cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(i = 0; i < callbacks.length; i++) {
/******/ 					cb = callbacks[i];
/******/ 					try {
/******/ 						cb(moduleOutdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "accept-errored",
/******/ 								moduleId: moduleId,
/******/ 								dependencyId: moduleOutdatedDependencies[i],
/******/ 								error: err
/******/ 							});
/******/ 						}
/******/ 						if(!options.ignoreErrored) {
/******/ 							if(!error)
/******/ 								error = err;
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err2) {
/******/ 						if(options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								orginalError: err
/******/ 							});
/******/ 						}
/******/ 						if(!options.ignoreErrored) {
/******/ 							if(!error)
/******/ 								error = err2;
/******/ 						}
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if(options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if(!options.ignoreErrored) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		return Promise.resolve(outdatedModules);
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(2)(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// line里面的数字:十位为行数，个位为列数
//(第一关代码中第0关，依次)第一关
module.exports = [{
		'point': [
			[
				[180, 200],
				[420, 200]
			],
			[
				[300, 325]
			],
			[
				[180, 450],
				[420, 450]
			]
		],
		'line': [
			[00, 10],
			[00, 20],
			[01, 10],
			[01, 21],
			[10, 20],
			[10, 21],
			[20, 21]
		],
		'time': 30
	}, { //第二关
		'point': [
			[
				[300, 100]
			],
			[
				[180, 220],
				[420, 220]
			],
			[
				[180, 400],
				[420, 400]
			]
		],
		'line': [
			[00, 10],
			[00, 11],
			[10, 11],
			[10, 20],
			[11, 20],
			[11, 21],
			[20, 21]
		],
		'time': 20
	}, { //第三关
		'point': [
			[
				[300, 100]
			],
			[
				[180, 260],
				[420, 260]
			],
			[
				[220, 450],
				[380, 450]
			]
		],
		'line': [
			[00, 20],
			[00, 21],
			[00, 10],
			[00, 11],
			[10, 11],
			[20, 21]
		],
		'time': 20
	}, { //第四关
		'point': [
			[
				[300, 100]
			],
			[
				[120, 220],
				[480, 220]
			],
			[
				[200, 450],
				[400, 450]
			]
		],
		'line': [
			[00, 20],
			[00, 21],
			[10, 11],
			[10, 21],
			[11, 20]

		],
		'time': 20
	}, { //第五关
		'point': [
			[
				[300, 100]
			],
			[
				[180, 220],
				[420, 220]
			],
			[
				[180, 400],
				[420, 400]
			]
		],
		'line': [
			[00, 10],
			[00, 11],
			[10, 11],
			[10, 20],
			[10, 21],
			[11, 20],
			[11, 21],
			[20, 21]
		],
		'time': 20
	},

	{ //第六关
		'point': [
			[
				[210, 160],
				[440, 160]
			],
			[
				[140, 250],
				[380, 250]
			],
			[
				[140, 460],
				[380, 460],
				[440, 400]
			]
		],
		'line': [
			[00, 01],
			[00, 10],
			[01, 11],
			[01, 22],
			[10, 11],
			[10, 20],
			[10, 21],
			[11, 20],
			[11, 21],
			[20, 21],
			[21, 22]
		],
		'time': 20
	},

	{ //第7关
		'point': [
			[
				[180, 160],
				[420, 160]
			],
			[
				[100, 330],
				[300, 330],
				[500, 330]
			],
			[
				[180, 500],
				[420, 500]
			]
		],
		'line': [
			[00, 01],
			[00, 10],
			[00, 11],
			[00, 12],
			[01, 11],
			[01, 12],
			[10, 11],
			[10, 20],
			[10, 21],
			[11, 20],
			[11, 21],
			[11, 12],
			[12, 21],
			[20, 21]
		],
		'time': 20
	},

	{ //第8关
		'point': [
			[
				[180, 160],
				[420, 160]
			],
			[
				[100, 330],
				[270, 330],
				[500, 330]
			],
			[
				[180, 500],
				[420, 500]
			]
		],
		'line': [
			[00, 01],
			[00, 20],
			[00, 10],
			[00, 11],
			[01, 21],
			[01, 12],
			[10, 20],
			[11, 20],
			[12, 21],
			[20, 21]
		],
		'time': 20
	},

	{ //第9关
		'point': [
			[
				[300, 130]
			],
			[
				[200, 230],
				[400, 230]
			],
			[
				[100, 330],
				[200, 330],
				[400, 330],
				[500, 330]
			],
			[
				[200, 425],
				[400, 425]
			],
			[
				[300, 520]
			]
		],
		'line': [
			[00, 10],
			[00, 11],
			[10, 11],
			[10, 20],
			[10, 21],
			[11, 22],
			[11, 23],
			[20, 21],
			[20, 30],
			[21, 22],
			[21, 30],
			[22, 31],
			[22, 23],
			[23, 31],
			[30, 31],
			[30, 40],
			[31, 40]
		],
		'time': 20
	},

	{ //第10关
		'point': [
			[
				[300, 130]
			],
			[
				[200, 230],
				[400, 230]
			],
			[
				[100, 330],
				[200, 330],
				[400, 330],
				[500, 330]
			],
			[
				[200, 425],
				[400, 425]
			],
			[
				[300, 520]
			]
		],
		'line': [
			[00, 10],
			[00, 11],
			[10, 11],
			[10, 20],
			[10, 21],
			[11, 22],
			[11, 23],
			[20, 21],
			[20, 30],
			[21, 22],
			[21, 30],
			[22, 31],
			[22, 23],
			[23, 31],
			[30, 31],
			[30, 40],
			[31, 40]
		],
		'time': 20
	}
];

/***/ }),
/* 1 */
/***/ (function(module, exports) {



module.exports = function(fileArr, cb){

    var files = (function(fileArr) {
        var files = [];
        fileArr.forEach(function(obj) {
            for (var attr in obj) {
                files.push(obj[attr]);
            }
        });
        return files;
    })(fileArr);

    var queue = new createjs.LoadQueue();
    queue.installPlugin(createjs.Sound);

    queue.on("progress", function(e){
        var width = 320, height = 640;
        var iLoaded =  Math.ceil(e.loaded*100);
        var loadingBg = new createjs.Shape();
        loadingBg.graphics.beginFill("#000").drawRect(0, 0, width, height);

        var loadingText = new createjs.Text(iLoaded+'%', "26px Arial", "#fff");
        loadingText.x = width/2;
        loadingText.y = 120;
        loadingText.textStyle = 'center'; 
        var stage = new createjs.Stage("testcanvas");

        stage.addChild(loadingBg, loadingText);
        stage.update();
    });
    queue.on("error", function(){
        alert('err')
    });

    queue.on("complete", _.bind(cb, window, queue));

    queue.loadManifest(files);
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var preloadFn = __webpack_require__(1);
var mapData = __webpack_require__(0);

var ImgObj = {
    bg: '../img/bg.jpg',
    home: '../img/home.png',
    btns: '../img/control-btn.png',
    pt: '../img/point.png',
    num: '../img/number.png'
};

var AudioObj = {
    // star1: '../audio/star1.ogg',
    // star2: '../audio/star2.ogg',
    // star3: '../audio/star3.ogg',
    // main: '../audio/sm_main_music.ogg',
    // start: '../audio/start_game.ogg',
    // click: '../audio/click.ogg',
    // fail: '../audio/fail.ogg',
    // win: '../audio/win.ogg'
}
var canvas = document.getElementById("testcanvas");
var stage = new createjs.Stage("testcanvas");

var Game = function(i){
    this.stage = new createjs.Stage("testcanvas");
    this.pass = {
        'point': [],
        'line': [],
        'time': -1
    };
    var data = mapData[i];
    for(var attr in data){
        this.pass[attr] = data[attr];
    }
    this.utility();

    this.drawEnterPage();
}

Game.prototype.soundPlay = function(tune){
    var instance = createjs.Sound.play(tune, createjs.Sound.INTERRUPT_NONE, 0, 0, false, 1);
    if (instance == null || instance.playState == createjs.Sound.PLAY_FAILED) {
        return;
    }
}

Game.prototype.drawEnterPage = function(){
    var self = this;
    this.stage.autoClear = true;
    this.stage.removeAllChildren();

    // this.soundPlay(AudioObj.main);
    this.bg = new createjs.Bitmap(ImgObj.bg);
    this.playLink = new createjs.Bitmap(ImgObj.home);
    this.playLink.x = 120;
    this.playLink.y =80;
    this.stage.addChild(this.bg,this.playLink);
    this.stage.update();

    // this.playLink.addEventListener('click',function(){
        self.stage.removeAllChildren();
        self.stage.update();
    this.startTimetamp = +new Date;

        // self.gotoPlay(0);
        self.renderSite();
        self.renderPass();
        self.timerCount(60);
        self.fnDrawLine();


    // })
}
Game.prototype.renderPass = function() {

    var self = this;
    this.ptSpriteArr = [];
    this.lineCoords = [];
    this.staticLine = new createjs.Shape();
    this.drawingLine = new createjs.Shape();  //画出来的线,画线的位置和点的位置是有偏移的
    this.drawedLine = new createjs.Shape();     //将来过去绘制成功的线

    var pointSpSheet = new createjs.SpriteSheet({
        'images': [ImgObj.pt], 
        'frames': {width: 48, height: 42},
        'framerate': 1
    });
    this.pointIcon = new createjs.Sprite(pointSpSheet);
    this.pointIcon.gotoAndStop(1);
    // 画线
    this.stage.addChild(self.staticLine,self.drawingLine,self.drawedLine);
    _.each(this.pass.line,function(line){
        
        var fromCoord = self.transToCoord(line[0]),
            toCoord = self.transToCoord(line[1]);
        this.lineCoords.push([ [fromCoord[0]+24,fromCoord[1]+21],[toCoord[0]+24,toCoord[1]+21] ]);
        this.staticLine.graphics.setStrokeStyle(10, 'round', 'round')
            .beginStroke('rgba(255,255,255,0.5)')
            .moveTo(fromCoord[0]+24,fromCoord[1]+21)
            .lineTo(toCoord[0]+24,toCoord[1]+21);
    },this);

    this.emptyLineCoords = this.lineCoords;
    // 画点
    this.ptCoords = [];  //所有点坐标数组
    _.each(this.pass.point,function(Pts){
        this.ptCoords = this.ptCoords.concat(Pts);
    },this);

    _.each(this.ptCoords,function(coord){
        var ptIcon = this.pointIcon.clone();
        ptIcon.x = coord[0];
        ptIcon.y = coord[1];
        this.ptSpriteArr.push(ptIcon);
        this.stage.addChild(ptIcon);
    },this);

    this.stage.update();
    
};
Game.prototype.renderSite = function(n) {

    var self = this;
    
    var bg = new createjs.Bitmap(ImgObj.bg);
    var timeTxt = new createjs.Text("时间：", "26px Arial", "#fff"); 
    timeTxt.x = 40;
    timeTxt.y = 24;

    var iPassedIcon =  new createjs.Text("关卡：", "26px Arial", "#fff");
    iPassedIcon.x = 520;
    iPassedIcon.y = 20;
    iPassedIcon.textStyle = 'center'; 

    this.stage.addChild(bg, timeTxt, iPassedIcon);
    // this.stage.update();
}
Game.prototype.timerCount = function(n) {
    // 倒计时的时间只会有两位数
    // ?? sprite能不能控制framerate
    var self = this;
    var ten = Math.floor(n/10),
        sec = n - ten*10;
    var numArr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    var tenData = {
        framerate: 0.1,
        'images': [ImgObj.num],
        paused: true,
        'frames': {
            width: 28,
            height: 38
        },
        'animations': {
            'countDown': {
                'frames': [9,8,7,6,5,4,3,2,1,0].slice(10-ten)
            }
        }
    };
    var secData = {
        framerate: 1,
        'images': [ImgObj.num],
        paused: true,

        'frames': {
            width: 28,
            height: 38
        },
        'animations': {
            'countDown': {
                'frames': [9,8,7,6,5,4,3,2,1,0]
            }
        }
    };

    var tenSpSheet = new createjs.SpriteSheet(tenData);
    var tenNumSp = this.tenNumSp = new createjs.Sprite(tenSpSheet, 'countDown');
    tenNumSp.y = 20;
    tenNumSp.x = 120;
    tenNumSp.gotoAndStop(ten);

    var secSpSheet = new createjs.SpriteSheet(secData);
    var secNumSp = this.secNumSp = new createjs.Sprite(secSpSheet, 'countDown');
    secNumSp.x = 148;
    secNumSp.y = 20;
    secNumSp.gotoAndStop(sec);
    
    this.stage.addChild(tenNumSp, secNumSp);

    createjs.Ticker.timingMode = createjs.Ticker.RAF;
    createjs.Ticker.addEventListener("tick", tick);
        createjs.Ticker.addEventListener("tick", this.stage);

    tenNumSp.gotoAndPlay('countDown');
    secNumSp.gotoAndPlay('countDown');
    this.stage.update();
}

Game.prototype.utility = function() {
    var self = this;
    this.transToCoord = function(num) {
        var str = num + '';
        str = str.length == 1 ? '0' + str : str;
        var arr = str.split('');
        var coord = self.pass.point[parseInt(arr[0])][parseInt(arr[1])];
        return coord;
    };

    this.getLinePts = function(ptCoord) {
        var targetPtCoords = [];
        for (var i = 0, len = this.emptyLineCoords.length; i < len; i++) {
            for (var j = 0, inLen = this.emptyLineCoords[i][j].length; j < inLen; j++) {
                if (ptCoordEql(ptCoord, this.emptyLineCoords[i][j])) {
                    targetPtCoords.push(this.emptyLineCoords[i][inLen - 1 - j]);
                }
            }
        };

        return targetPtCoords;
    }
}

Game.prototype.fnDrawLine = function() {
    createjs.Touch.enable(stage);
    this.stage.enableMouseOver(10);
    var self = this;
    
    
    this.ptCenterCoords = _.map(this.ptCoords,function(coord){
        return [coord[0]+24,coord[1]+21];
    },this);
    this.emptyPtCoords = this.ptCenterCoords;
    var self = this;
    var drawingLine, bx, by;
    _.each(this.ptSpriteArr,function(pt){
        pt.on('mousedown',function(evt){    //为什么这里要用function包  
        // debugger;
            this.offset = {x: this.x - evt.stageX, y: this.y - evt.stageY};

            drawingLine = new createjs.Shape();  //画出来的线,画线的位置和点的位置是有偏移的
            bx = this.x + 24;
            by = this.y + 21;
            console.log(this.x, this.y)

            self.stage.addChild(drawingLine)
            // self.handleDown(e);
        });

        pt.on('pressmove', function(evt){

            var self = this;
            var x = evt.stageX + this.offset.x;
            var y = evt.stageY + this.offset.y;
            // indicate that the stage should be updated on the next tick:
            // update = true;
            // debugger
            drawingLine.graphics.clear().setStrokeStyle(12, 'round', 'round')
                    .beginStroke('rgba(0,255,0,1)')
                    .moveTo(bx,  by)
                    .lineTo(x, y);

            
        })




    },this);

    
    this.handleDown = function(e){
        _.each(this.ptSpriteArr,function(pt){
            pt.removeEventListener('mousedown',self.handleDown);    
        },this);

        e.target.gotoAndStop(0);
        var downX = e.target.x,downY = e.target.y;
        
        this.emptyPtCoords = _.reject(this.emptyPtCoords, function(coord){ return (coord[0]==downX+24)&&(coord[1]==downY+21) });
        // console.log([downX+24,downY+21])
        // console.log(JSON.stringify(this.emptyPtCoords))
        this.downX = downX+24; this.downY = downY+21;
        self.stage.addEventListener('stagemousemove',self.handleMove);
        self.stage.addEventListener('stagemouseup',self.handleUp);
    };

    this.handleMove = function(e){
        if (!e.primary) { return; } //？
        // console.log(this)
        self.meetPt();
        // self.stage.addChild(self.drawingLine);
        self.stage.update();
    };

    this.handleUp = function(event){
        if (!event.primary) { return; }
        self.stage.removeEventListener("stagemousemove",self.handleMove);
        // self.lose();
        alert('你输了！')
    };

    this.reDrawPt = function(coord,isStartPt){
        /*console.log(coord)
        var thePtSprite = _.find(this.ptSpriteArr,function(sprite){
            return (sprite.x==coord[0]) && (sprite.y==coord[1]);
        });
        console.log(thePtSprite);
        thePtSprite.gotoAndStop(0);
        if(isStartPt){
            this.pointIcon.gotoAndStop(0);  
        }else{
            
        }*/


    };

    this.DoMeetPt = function(coord){
        var coord = [self.stage.mouseX,self.stage.mouseY ];
        var padding = 8;
        var target = _.find(this.ptCenterCoords,function(d){
            return  Math.sqrt( (Math.pow((coord[0]-d[0]),2 ) + Math.pow((coord[1]-d[1]),2)) )< padding;
        },this);
        return target;
    }

    this.meetPt = function(){
        var curPt = self.DoMeetPt(),    //当前绘图遇到的点的位置
            targetPts = self.getLinePts([self.downX,self.downY]); //当前绘图的目标点的位置的数组  
        if( !curPt){
            self.notMetDrawing();
            
        }else{
            var thePtCoord = _.find(targetPts,function(pt){
                return ptCoordEql(pt,curPt);
            });
            if(!thePtCoord){
                self.rejectMeet();
                console.log('reject')
            }else{
                self.getOne(thePtCoord);
            }
        };
    };

    this.notMetDrawing = function(){
        self.prevCoord = [self.stage.mouseX,self.stage.mouseY];
        self.drawingLine.graphics.clear().setStrokeStyle(12, 'round', 'round')
                .beginStroke('rgba(0,255,0,1)')
                .moveTo(self.downX,self.downY)
                .lineTo(self.stage.mouseX,self.stage.mouseY);
    };

    this.getOne = function(toPtCoord){
        var tLineCoord = [[this.downX,this.downY],toPtCoord];
        console.log(JSON.stringify(this.emptyLineCoords));
        var cur_index =-1;
        for (var i = 0,len=this.emptyLineCoords.length; i < len; i++) {
            var arr = this.emptyLineCoords[i];
            if( ( arr[0].eql(tLineCoord[0]) && arr[1].eql(tLineCoord[1]) ) || ( arr[1].eql(tLineCoord[0]) && arr[0].eql(tLineCoord[1]) ) ){
                cur_index = i;
            }
        };

        this.emptyLineCoords.splice(cur_index,1);
        if(this.emptyLineCoords.length == 0){
            // self.win();
            alert('你赢了！')
        }
        // console.log(JSON.stringify(tLineCoord))
        console.log(JSON.stringify(this.emptyLineCoords));
        console.log(this.emptyLineCoords.length)

        self.drawedLine.graphics.setStrokeStyle(12, 'round', 'round')
            .beginStroke('rgba(0,255,0,1)')
            .moveTo(self.downX,self.downY)
            .lineTo(toPtCoord[0],toPtCoord[1]);
    
        // self.reDrawPt( [toPtCoord[0]-24,toPtCoord[1]-21] );
        self.stage.update();
        self.downX = toPtCoord[0];
        self.downY = toPtCoord[1];

    };

    this.rejectMeet = function(){

    };
}
var tick =function(e){
    if(+new Date -game.startTimetamp  > 60*1000){
        game.tenNumSp.stop();
        game.secNumSp.stop();
        game.stage.removeChild(game.tenNumSp, game.secNumSp);
    }

    game.secNumSp.play()
    // console.log(game.secNumSp.currentFrame)
    // game.stage.update(event);
}

var game;
preloadFn([ImgObj, AudioObj], function(queue){
    for(var attr in ImgObj){
        ImgObj[attr] = queue.getResult(ImgObj[attr]);
    }
    game = new Game(0);
});

/***/ })
/******/ ]);